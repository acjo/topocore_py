---
title: "Coding Homework March 28th"
format:
  html:
    code-fold: true
jupyter: python3
toc: true
toc-depth: 4
---


## Overview

The releveant member functions for todays assignments are:

1. compute_boundary
2. compute_boundary_matrix
3. find_kernel_basis
4. find_homologies
5. find_ranks

## Simplicial Complex Construction
We can construct the simplicial complex $K$ using the two facts that define a simplicial complex.

1. If the simplex $\sigma\in K$  then a face $\tau \subset \sigma$ is also an element of $K$.
2. If $\sigma, \sigma^\prime \in K$ then $\sigma \cap \sigma^\prime$ is a face of $\sigma$ and $\sigma^\prime$.
3. Furthermore the dimension of $K$ is equal to $\dim{K} = \max\{\dim \sigma : \sigma \in K\}$.

Below we plot Complex A and Complex B in @fig-simplicial-complex-plots-1 and @fig-simplicial-complex-plots-2 respectively.

```{python}
#| label: fig-simplicial-complex-plots
#| fig-cap: "Simplicial Complexes"
#| fig-subcap:
#|   - "Simplicial Complex A"
#|   - "Simplicial Complex B"
#| layout-ncol: 2

from matplotlib import pyplot as plt
from matplotlib import rcParams

from topocore import SimplicialComplex
from topocore.examples.simplicial_complex_a import SimplicialComplexA
from topocore.examples.simplicial_complex_b import SimplicialComplexB
complex_a = SimplicialComplexA()
complex_a.set_simplices_as_lists()
complex_a.visualize_complex()
complex_b = SimplicialComplexB()
complex_b.set_simplices_as_lists()
complex_b.visualize_complex()
```

## Boundary Matrices


We can now compute the boundary matrices.

### Complex A

The boundary matrices for complex A are shown below

::: {style="font-size: 70%;"}
```{python}
#| label: a
#| tbl-cap: "Boundary Matrices"
#| tbl-subcap:
#|   - '$\\partial_0: C_0 \\to 0$'
#|   - '$\\partial_1: C_1 \\to C_0$'
#|   - '$\\partial_2: C_2 \\to C_1$'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]
from IPython.display import Markdown
import pandas as pd
del_0_a = complex_a.compute_boundary_matrix(0)
del_1_a = complex_a.compute_boundary_matrix(1)
del_2_a = complex_a.compute_boundary_matrix(2)

columns_0 = ["{" +", ".join(list(s)) + "}" for s in complex_a.simplices[0]]
columns_1 = ["{" +", ".join(list(s)) + "}" for s in complex_a.simplices[1]]
rows_1 = columns_0
columns_2 = ["{" + ", ".join(list(s)) +"}" for s in complex_a.simplices[2]]
rows_2 = columns_1

data_0 = {c0: del_0_a[:, i] for i, c0 in enumerate(columns_0)}
data_1 = {c1: del_1_a[:, i] for i, c1 in enumerate(columns_1)}
data_2 = {c2: del_2_a[:, i] for i, c2 in enumerate(columns_2)}

df0 = pd.DataFrame(data=data_0, index=["emptyset"])
df1 = pd.DataFrame(data=data_1, index=rows_1)
df2 = pd.DataFrame(data=data_2, index=rows_2)
display(Markdown(df0.to_markdown(index=True)))
display(Markdown(df1.to_markdown(index=True)))
display(Markdown(df2.to_markdown(index=True)))
```
:::

### Complex B

The boundary matrices for complex B are shown below

::: {style="font-size: 70%;"}
```{python}
#| label: B
#| tbl-cap: "Boundary Matrices"
#| tbl-subcap:
#|   - '$\\partial_0: C_0 \\to 0$'
#|   - '$\\partial_2: C_2 \\to C_1$'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]
from IPython.display import Markdown
import pandas as pd
del_0_b = complex_b.compute_boundary_matrix(0)
del_1_b = complex_b.compute_boundary_matrix(1)
del_2_b = complex_b.compute_boundary_matrix(2)

columns_0 = ["{" +", ".join(list(s)) + "}" for s in complex_b.simplices[0]]
columns_1 = ["{" +", ".join(list(s)) + "}" for s in complex_b.simplices[1]]
rows_1 = columns_0
columns_2 = ["{" + ", ".join(list(s)) +"}" for s in complex_b.simplices[2]]
rows_2 = columns_1

data_0 = {c0: del_0_b[:, i] for i, c0 in enumerate(columns_0)}
data_1 = {c1: del_1_b[:, i] for i, c1 in enumerate(columns_1)}
data_2 = {c2: del_2_b[:, i] for i, c2 in enumerate(columns_2)}

df0 = pd.DataFrame(data=data_0, index=["emptyset"])
df1 = pd.DataFrame(data=data_1, index=rows_1)
df2 = pd.DataFrame(data=data_2, index=rows_2)
display(Markdown(df0.to_markdown(index=True)))
display(Markdown(df2.to_markdown(index=True)))
print(del_1_b.shape)
```
:::

::: {style="font-size: 50%;"}

```{python}
#| label: C
#| tbl-cap: ""
#| tbl-subcap:
#|   - '$\\partial_1: C_1 \\to C_0$'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]
display(Markdown(df1.to_markdown(index=True)))
```
:::


### Computing Some Boundaries

We will now compute the boundaries of some $p$-chains in every dimension.
Note that we will not compute the boundaries of all $p$-chains due to the combinatorial explosion but enough that we are confident that our method is correct.

#### Complex A
We do this for Complex A below.

1. For the $0$-chain we test $\{Cow\} + \{Rabbit\}$ we should expect the boundary to be $0$.
2. For the $1$-chain we test
\begin{align*}
  \{Horse, Dog\}+\{Fish, Dolphin\}+\{Fish, Oyster\}
\end{align*}
And we should expect the boundary to be.
\begin{align*}
  \{Horse\} +\{Dog\}+\{Dolphin\}+\{ Oyster\}
\end{align*}
3. For the $2$-chain we test $\{Horse, Dog, Rabbit\}$ we should expect the boundary to be zero.
\begin{align*}
  \{Horse, Dog\} +\{Horse, Rabbit\}+\{Dog, Rabbit\}
\end{align*}


This is exactly what we get if you look at @tbl-boundaries-a

```{python}
#| label: tbl-boundaries-a
#| tbl-cap: "Example Boundaries of P-chains for Complex A"
#| tbl-subcap:
#|   - 'Boundary of 0-chain'
#|   - 'Boundary of 1-chain'
#|   - 'Boundary of 2-chain'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]
p_chain_0 = [frozenset({"Cow"}), frozenset({"Rabbit"})]
p_chain_1 = [frozenset({"Horse", "Dog"}), frozenset({"Fish", "Dolphin"}), frozenset({"Fish", "Oyster"})]
p_chain_2 = [frozenset({"Rabbit", "Horse", "Dog"})]

coeff00, basis00 =complex_a.compute_boundary(0, p_chain_0)
coeff0, basis0 = complex_a.compute_boundary(1, p_chain_1)
coeff1, basis1 = complex_a.compute_boundary(2, p_chain_2)

data00 = {"Coefficient Z mod 2": []}
index00 = []
data0 = {"Coefficient Z mod 2":[]}
index0 = []
data1 = {"Coefficient Z mod 2": []}
index1 = []

for c, b in zip(coeff00, basis00):
    data00["Coefficient Z mod 2"].append(c)
    index00.append(b)
for c, b in zip(coeff0, basis0):
    data0["Coefficient Z mod 2"].append(c)
    index0.append(b)
for c, b in zip(coeff1, basis1):
    data1["Coefficient Z mod 2"].append(c)
    index1.append(b)

df_00 = pd.DataFrame(data=data00,index=index00)
df_0 = pd.DataFrame(data=data0,index=index0)
df_1 = pd.DataFrame(data=data1, index=index1)

display(Markdown(df_00.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_0)))

display(Markdown(df_0.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_1)))

display(Markdown(df_1.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_2)))
```

#### Complex B

We do the same for complex B below.
We use new test $p$-chains:

1. For the $0$-chain we test $\{Rabbit\}$ we should expect the boundary to be $0$.
2. For the $1$-chain we test
\begin{align*}
  \{Horse, Dog\}+\{Horse, Dolphin\}+\{Dog, Dolphin\}
\end{align*}
We should expect this to be in the kernel of the boundary matrix (it is a cycle).
So we shold expect to get all zeros.
3. For the $2$-chain we test $\{Rabbit, Onion, Apple\}$ we should expect the boundary to be zero.
\begin{align*}
  \{Rabbit, Onion\} +\{Rabbit, Apple\}+\{Onion,  Apple\}
\end{align*}

The boundaries of these $p$-chains will be equivalent. And we can check that we get the correct thing in the table below @tbl-boundaries-b.

```{python}
#| label: tbl-boundaries-b
#| tbl-cap: "Example Boundaries of P-chains for Complex A"
#| tbl-subcap:
#|   - 'Boundary of 0-chain'
#|   - 'Boundary of 1-chain'
#|   - 'Boundary of 2-chain'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]

p_chain_0 = [frozenset({"Rabbit"})]
p_chain_1 = [frozenset({"Horse", "Dog"}), frozenset({"Horse", "Dolphin"}), frozenset({"Dog", "Dolphin"})]
p_chain_2 = [frozenset({"Rabbit", "Onion", "Apple"})]
coeff00, basis00 =complex_b.compute_boundary(0, p_chain_0)
coeff0, basis0 = complex_b.compute_boundary(1, p_chain_1)
coeff1, basis1 = complex_b.compute_boundary(2, p_chain_2)

data00 = {"Coefficient Z mod 2": []}
index00 = []
data0 = {"Coefficient Z mod 2":[]}
index0 = []
data1 = {"Coefficient Z mod 2": []}
index1 = []

for c, b in zip(coeff00, basis00):
    data00["Coefficient Z mod 2"].append(c)
    index00.append(b)
for c, b in zip(coeff0, basis0):
    data0["Coefficient Z mod 2"].append(c)
    index0.append(b)
for c, b in zip(coeff1, basis1):
    data1["Coefficient Z mod 2"].append(c)
    index1.append(b)

df_00 = pd.DataFrame(data=data00,index=index00)
df_0 = pd.DataFrame(data=data0,index=index0)
df_1 = pd.DataFrame(data=data1, index=index1)

display(Markdown(df_00.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_0)))

display(Markdown(df_0.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_1)))

display(Markdown(df_1.to_markdown(index=True)))
print("p_chain: " + "+".join(map(str,p_chain_2)))
```


## Finding the Kernel Basis P-Chains

We now use the boundary matrices to compute the cycles. We can see this in @tbl-cycles-a.
As expected the basis for $\operatorname{ker}\partial_0$ is just the $0$-simplices.
We don't show here, but when you put these through the  ```compute_boundary``` function, they basis $p$-chains below map to $0$.

Note: As before, when we represent p_chains this way we mean that in the formal sum the coefficient in $\mathbb{Z}_2$ will be 1.

### Complex A

```{python}
#| label: tbl-cycles-a
#| tbl-cap: "Computing the Basis for Cycles for Complex A"
#| tbl-subcap:
#|   - 'Cycles for 0'
#|   - 'Cycles for 1'
#|   - 'Cycles for 2'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]

basis_ker_0,_ = complex_a.find_kernel_basis(0)
basis_ker_1,_ = complex_a.find_kernel_basis(1)
basis_ker_2,_ = complex_a.find_kernel_basis(2)


data_0 = {"Basis P-chain" : [[] for _ in basis_ker_0]}
data_1 = {"Basis P-chain" : [[] for _ in basis_ker_1]}
data_2 = {"Basis P-chain" : [[] for _ in basis_ker_2]}

df_0 = pd.DataFrame(data=data_0, index=range(len(basis_ker_0)))
df_1 = pd.DataFrame(data=data_1, index=range(len(basis_ker_1)))
df_2 = pd.DataFrame(data=data_2, index=range(len(basis_ker_2)))
df_0.loc[:, "Basis P-chain"] = df_0.astype({"Basis P-chain": object})
df_1.loc[:, "Basis P-chain"] = df_1.astype({"Basis P-chain": object})
df_2.loc[:, "Basis P-chain"] = df_2.astype({"Basis P-chain": object})

for i in range(len(basis_ker_0)):
    df_0.loc[i, "Basis P-chain"] = basis_ker_0[i]

for i in range(len(basis_ker_1)):
    df_1.loc[i, "Basis P-chain"] = basis_ker_1[i]

for i in range(len(basis_ker_2)):
    df_2.loc[i, "Basis P-chain"] = basis_ker_2[i]

display(Markdown(df_0.to_markdown(index=False)))
display(Markdown(df_1.to_markdown(index=False)))
display(Markdown(df_2.to_markdown(index=False)))
```

### Complex B

We now use the boundary matrices to compute the cycles. We can see this in @tbl-cycles-b.

```{python}
#| label: tbl-cycles-b
#| tbl-subcap:
#|   - 'Cycles for 0'
#|   - 'Cycles for 1'
#|   - 'Cycles for 2'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]

basis_ker_0,_ = complex_b.find_kernel_basis(0)
basis_ker_1,_ = complex_b.find_kernel_basis(1)
basis_ker_2,_ = complex_b.find_kernel_basis(2)


data_0 = {"Basis P-chains" : [[] for _ in basis_ker_0]}
data_1 = {"Basis P-chains" : [[] for _ in basis_ker_1]}
data_2 = {"Basis P-chains" : [[] for _ in basis_ker_2]}

df_0 = pd.DataFrame(data=data_0, index=range(len(basis_ker_0)))
df_1 = pd.DataFrame(data=data_1, index=range(len(basis_ker_1)))
df_2 = pd.DataFrame(data=data_2, index=range(len(basis_ker_2)))
df_0.loc[:, "Basis P-chains"] = df_0.astype({"Basis P-chains": object})
df_1.loc[:, "Basis P-chains"] = df_1.astype({"Basis P-chains": object})
df_2.loc[:, "Basis P-chains"] = df_2.astype({"Basis P-chains": object})

for i in range(len(basis_ker_0)):
    df_0.loc[i, "Basis P-chains"] = basis_ker_0[i]

for i in range(len(basis_ker_1)):
    df_1.loc[i, "Basis P-chains"] = basis_ker_1[i]

for i in range(len(basis_ker_2)):
    df_2.loc[i, "Basis P-chains"] = basis_ker_2[i]

display(Markdown(df_0.to_markdown(index=False)))
display(Markdown(df_1.to_markdown(index=False)))
display(Markdown(df_2.to_markdown(index=False)))
```

## Finding the Homologies.

The homology $H_p$ is defined as $H_p = Z_p/B_p$ where $Z_p = \operatorname{ker}(\partial_p)$ and $B_p = \operatorname{im}(\partial_{p+1})$.
That is the homologies are the cycles that do not result from a boundary of some higher level $p+1$-simplex.

We can find the homologies as follows.

1. Find the basis for the null space of $\operatorname{ker}(\partial_p)$.
2. Compute the boundary matrix $\partial_{p+1}$ and compute the rank of $\partial_{p+1}$
3. We augment the $\partial_{p+1}$ with the basis vector of $\operatorname{ker}(\partial_p)$.
  1. If the rank increases, this means the basis vector was not in the image of of $\partial_{p+1}$ and so it is an element of $H_p$.
  2. If the rank stays the same, this means the basis vector is in the image of $\partial_{p+1}$ which means that the basis vector is not an element of $H_p$.

We display the basis $p$-chains for each homology for each complex below.

### Complex A

The homologies are shown in the tables below in @tbl-homologies-a

```{python}
#| label: tbl-homologies-a
#| tbl-subcap:
#|   - 'Homologies for 0'
#|   - 'Homologies for 1'
#|   - 'Homologies for 2'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]

h0 = complex_a.find_homologies(0)
h1 = complex_a.find_homologies(1)
h2 = complex_a.find_homologies(2)


data_0 = {"Basis H_0" : [[] for _ in h0]}
data_1 = {"Basis H_1" : [[] for _ in h1]}
data_2 = {"Basis H_2" : [[] for _ in h2]}
df_0 = pd.DataFrame(data=data_0, index=range(len(h0)))
df_1 = pd.DataFrame(data=data_1, index=range(len(h1)))
df_2 = pd.DataFrame(data=data_2, index=range(len(h2)))
df_0.loc[:, "Basis H_0"] = df_0.astype({"Basis H_0": object})
df_1.loc[:, "Basis H_1"] = df_1.astype({"Basis H_1": object})
df_2.loc[:, "Basis H_2"] = df_2.astype({"Basis H_2": object})

for i in range(len(h0)):
    df_0.loc[i, "Basis H_0"] = h0[i]

for i in range(len(h1)):
    df_1.loc[i, "Basis H_1"] = h1[i]

for i in range(len(h2)):
    df_2.loc[i, "Basis H_2"] = h2[i]

df_0["H_0 p-chain Index"] =range(len(h0))
df_1["H_1 p-chain Index"] =range(len(h1))
df_2["H_2 p-chain Index"] =range(len(h2))

display(Markdown(df_0.to_markdown(index=False)))
display(Markdown(df_1.to_markdown(index=False)))
display(Markdown(r"This indicates that $H_1$ is empty."))
display(Markdown(df_2.to_markdown(index=False)))
```

### Complex B

### Complex B

The homologies are shown in the tables below in @tbl-homologies-b

```{python}
#| label: tbl-homologies-b
#| tbl-subcap:
#|   - 'Homologies for 0'
#|   - 'Homologies for 1'
#|   - 'Homologies for 2'
#| layout-ncol: 1
#| tbl-colwidths: [40, 40]

h0 = complex_b.find_homologies(0)
h1 = complex_b.find_homologies(1)
h2 = complex_b.find_homologies(2)


data_0 = {"Basis H_0" : [[] for _ in h0]}
data_1 = {"Basis H_1" : [[] for _ in h1]}
data_2 = {"Basis H_2" : [[] for _ in h2]}
df_0 = pd.DataFrame(data=data_0, index=range(len(h0)))
df_1 = pd.DataFrame(data=data_1, index=range(len(h1)))
df_2 = pd.DataFrame(data=data_2, index=range(len(h2)))
df_0.loc[:, "Basis H_0"] = df_0.astype({"Basis H_0": object})
df_1.loc[:, "Basis H_1"] = df_1.astype({"Basis H_1": object})
df_2.loc[:, "Basis H_2"] = df_2.astype({"Basis H_2": object})

for i in range(len(h0)):
    df_0.loc[i, "Basis H_0"] = h0[i]

for i in range(len(h1)):
    df_1.loc[i, "Basis H_1"] = h1[i]

for i in range(len(h2)):
    df_2.loc[i, "Basis H_2"] = h2[i]

df_0["H_0 p-chain Index"] =range(len(h0))
df_1["H_1 p-chain Index"] =range(len(h1))
df_2["H_2 p-chain Index"] =range(len(h2))

display(Markdown(df_0.to_markdown(index=False)))
display(Markdown(df_1.to_markdown(index=False)))
display(Markdown(df_2.to_markdown(index=False)))
display(Markdown(r"This indicates that $H_2$ is empty."))
```



## Computing $\operatorname{rank} H_p$, $\operatorname{rank} Z_p$, and $\operatorname{rank}{B_p}$
We compute the ranks below

### Complex A
```{python}
ranks_a = complex_a.compute_homology_ranks()
display(ranks_a)
```

### Complex B
```{python}
ranks_b = complex_b.compute_homology_ranks()
display(ranks_b)
```

## Interpretation

### Complex A
As we expect from the homolgies the betti number tells us that complex $A$ has 3 connected components which we can see.
If we look at the elements in each connected component we can see that
This simplicial complex appears to be modeling a categorical relationship between different organisms.
The three connected components represent natural classifications (mammals, aquatic life, and plants), while the absence of 1-dimensional holes suggests strong interconnectedness within each group.
The two 2-dimensional voids indicate that both the mammals and plants form complete tetrahedral structures, representing their comprehensive interconnectedness.

### Complex B
This could be modeling something like food relationships or cultural/symbolic associations between these entities, with the two separate components representing fundamentally different domains of interaction.
